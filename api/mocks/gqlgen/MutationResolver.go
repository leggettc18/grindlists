// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	gqlgen "github.com/leggettc18/grindlists/api/gqlgen"
	mock "github.com/stretchr/testify/mock"

	pg "github.com/leggettc18/grindlists/api/pg"
)

// MutationResolver is an autogenerated mock type for the MutationResolver type
type MutationResolver struct {
	mock.Mock
}

// CreateList provides a mock function with given fields: ctx, data
func (_m *MutationResolver) CreateList(ctx context.Context, data gqlgen.ListInput) (*pg.List, error) {
	ret := _m.Called(ctx, data)

	var r0 *pg.List
	if rf, ok := ret.Get(0).(func(context.Context, gqlgen.ListInput) *pg.List); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pg.List)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, gqlgen.ListInput) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateListItem provides a mock function with given fields: ctx, listItemData
func (_m *MutationResolver) CreateListItem(ctx context.Context, listItemData gqlgen.CreateListItemInput) (*pg.Item, error) {
	ret := _m.Called(ctx, listItemData)

	var r0 *pg.Item
	if rf, ok := ret.Get(0).(func(context.Context, gqlgen.CreateListItemInput) *pg.Item); ok {
		r0 = rf(ctx, listItemData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pg.Item)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, gqlgen.CreateListItemInput) error); ok {
		r1 = rf(ctx, listItemData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteItem provides a mock function with given fields: ctx, id
func (_m *MutationResolver) DeleteItem(ctx context.Context, id int64) (*pg.Item, error) {
	ret := _m.Called(ctx, id)

	var r0 *pg.Item
	if rf, ok := ret.Get(0).(func(context.Context, int64) *pg.Item); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pg.Item)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteList provides a mock function with given fields: ctx, id
func (_m *MutationResolver) DeleteList(ctx context.Context, id int64) (*pg.List, error) {
	ret := _m.Called(ctx, id)

	var r0 *pg.List
	if rf, ok := ret.Get(0).(func(context.Context, int64) *pg.List); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pg.List)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *MutationResolver) DeleteUser(ctx context.Context, id int64) (*pg.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *pg.User
	if rf, ok := ret.Get(0).(func(context.Context, int64) *pg.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pg.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Heart provides a mock function with given fields: ctx, listID
func (_m *MutationResolver) Heart(ctx context.Context, listID int64) (*pg.List, error) {
	ret := _m.Called(ctx, listID)

	var r0 *pg.List
	if rf, ok := ret.Get(0).(func(context.Context, int64) *pg.List); ok {
		r0 = rf(ctx, listID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pg.List)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, listID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, data
func (_m *MutationResolver) Login(ctx context.Context, data gqlgen.LoginInput) (*pg.User, error) {
	ret := _m.Called(ctx, data)

	var r0 *pg.User
	if rf, ok := ret.Get(0).(func(context.Context, gqlgen.LoginInput) *pg.User); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pg.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, gqlgen.LoginInput) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: ctx
func (_m *MutationResolver) Logout(ctx context.Context) (*gqlgen.LogoutOutput, error) {
	ret := _m.Called(ctx)

	var r0 *gqlgen.LogoutOutput
	if rf, ok := ret.Get(0).(func(context.Context) *gqlgen.LogoutOutput); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlgen.LogoutOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Refresh provides a mock function with given fields: ctx
func (_m *MutationResolver) Refresh(ctx context.Context) (*pg.User, error) {
	ret := _m.Called(ctx)

	var r0 *pg.User
	if rf, ok := ret.Get(0).(func(context.Context) *pg.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pg.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, data
func (_m *MutationResolver) Register(ctx context.Context, data gqlgen.UserInput) (*pg.User, error) {
	ret := _m.Called(ctx, data)

	var r0 *pg.User
	if rf, ok := ret.Get(0).(func(context.Context, gqlgen.UserInput) *pg.User); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pg.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, gqlgen.UserInput) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetListItem provides a mock function with given fields: ctx, data
func (_m *MutationResolver) SetListItem(ctx context.Context, data gqlgen.ListItemInput) (*pg.ListItem, error) {
	ret := _m.Called(ctx, data)

	var r0 *pg.ListItem
	if rf, ok := ret.Get(0).(func(context.Context, gqlgen.ListItemInput) *pg.ListItem); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pg.ListItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, gqlgen.ListItemInput) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnsetListItem provides a mock function with given fields: ctx, id
func (_m *MutationResolver) UnsetListItem(ctx context.Context, id int64) (*pg.ListItem, error) {
	ret := _m.Called(ctx, id)

	var r0 *pg.ListItem
	if rf, ok := ret.Get(0).(func(context.Context, int64) *pg.ListItem); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pg.ListItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateItem provides a mock function with given fields: ctx, id, data
func (_m *MutationResolver) UpdateItem(ctx context.Context, id int64, data gqlgen.ItemInput) (*pg.Item, error) {
	ret := _m.Called(ctx, id, data)

	var r0 *pg.Item
	if rf, ok := ret.Get(0).(func(context.Context, int64, gqlgen.ItemInput) *pg.Item); ok {
		r0 = rf(ctx, id, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pg.Item)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, gqlgen.ItemInput) error); ok {
		r1 = rf(ctx, id, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateList provides a mock function with given fields: ctx, id, data
func (_m *MutationResolver) UpdateList(ctx context.Context, id int64, data gqlgen.ListInput) (*pg.List, error) {
	ret := _m.Called(ctx, id, data)

	var r0 *pg.List
	if rf, ok := ret.Get(0).(func(context.Context, int64, gqlgen.ListInput) *pg.List); ok {
		r0 = rf(ctx, id, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pg.List)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, gqlgen.ListInput) error); ok {
		r1 = rf(ctx, id, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateListItem provides a mock function with given fields: ctx, id, data
func (_m *MutationResolver) UpdateListItem(ctx context.Context, id int64, data gqlgen.ListItemInput) (*pg.ListItem, error) {
	ret := _m.Called(ctx, id, data)

	var r0 *pg.ListItem
	if rf, ok := ret.Get(0).(func(context.Context, int64, gqlgen.ListItemInput) *pg.ListItem); ok {
		r0 = rf(ctx, id, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pg.ListItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, gqlgen.ListItemInput) error); ok {
		r1 = rf(ctx, id, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, id, data
func (_m *MutationResolver) UpdateUser(ctx context.Context, id int64, data gqlgen.UserInput) (*pg.User, error) {
	ret := _m.Called(ctx, id, data)

	var r0 *pg.User
	if rf, ok := ret.Get(0).(func(context.Context, int64, gqlgen.UserInput) *pg.User); ok {
		r0 = rf(ctx, id, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pg.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, gqlgen.UserInput) error); ok {
		r1 = rf(ctx, id, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
