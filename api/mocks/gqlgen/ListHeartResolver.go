// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	pg "github.com/leggettc18/grindlists/api/pg"
)

// ListHeartResolver is an autogenerated mock type for the ListHeartResolver type
type ListHeartResolver struct {
	mock.Mock
}

// List provides a mock function with given fields: ctx, obj
func (_m *ListHeartResolver) List(ctx context.Context, obj *pg.ListHeart) (*pg.List, error) {
	ret := _m.Called(ctx, obj)

	var r0 *pg.List
	if rf, ok := ret.Get(0).(func(context.Context, *pg.ListHeart) *pg.List); ok {
		r0 = rf(ctx, obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pg.List)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pg.ListHeart) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// User provides a mock function with given fields: ctx, obj
func (_m *ListHeartResolver) User(ctx context.Context, obj *pg.ListHeart) (*pg.User, error) {
	ret := _m.Called(ctx, obj)

	var r0 *pg.User
	if rf, ok := ret.Get(0).(func(context.Context, *pg.ListHeart) *pg.User); ok {
		r0 = rf(ctx, obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pg.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pg.ListHeart) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
