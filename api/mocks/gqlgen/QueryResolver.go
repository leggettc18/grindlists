// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	pg "github.com/leggettc18/grindlists/api/pg"
)

// QueryResolver is an autogenerated mock type for the QueryResolver type
type QueryResolver struct {
	mock.Mock
}

// Item provides a mock function with given fields: ctx, id
func (_m *QueryResolver) Item(ctx context.Context, id int64) (*pg.Item, error) {
	ret := _m.Called(ctx, id)

	var r0 *pg.Item
	if rf, ok := ret.Get(0).(func(context.Context, int64) *pg.Item); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pg.Item)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Items provides a mock function with given fields: ctx
func (_m *QueryResolver) Items(ctx context.Context) ([]pg.Item, error) {
	ret := _m.Called(ctx)

	var r0 []pg.Item
	if rf, ok := ret.Get(0).(func(context.Context) []pg.Item); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pg.Item)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, id
func (_m *QueryResolver) List(ctx context.Context, id int64) (*pg.List, error) {
	ret := _m.Called(ctx, id)

	var r0 *pg.List
	if rf, ok := ret.Get(0).(func(context.Context, int64) *pg.List); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pg.List)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Lists provides a mock function with given fields: ctx
func (_m *QueryResolver) Lists(ctx context.Context) ([]pg.List, error) {
	ret := _m.Called(ctx)

	var r0 []pg.List
	if rf, ok := ret.Get(0).(func(context.Context) []pg.List); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pg.List)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Me provides a mock function with given fields: ctx
func (_m *QueryResolver) Me(ctx context.Context) (*pg.User, error) {
	ret := _m.Called(ctx)

	var r0 *pg.User
	if rf, ok := ret.Get(0).(func(context.Context) *pg.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pg.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// User provides a mock function with given fields: ctx, id
func (_m *QueryResolver) User(ctx context.Context, id int64) (*pg.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *pg.User
	if rf, ok := ret.Get(0).(func(context.Context, int64) *pg.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pg.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Users provides a mock function with given fields: ctx
func (_m *QueryResolver) Users(ctx context.Context) ([]pg.User, error) {
	ret := _m.Called(ctx)

	var r0 []pg.User
	if rf, ok := ret.Get(0).(func(context.Context) []pg.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pg.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
