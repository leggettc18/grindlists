// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	gqlgen "github.com/leggettc18/grindlists/api/gqlgen"
	mock "github.com/stretchr/testify/mock"
)

// ResolverRoot is an autogenerated mock type for the ResolverRoot type
type ResolverRoot struct {
	mock.Mock
}

// List provides a mock function with given fields:
func (_m *ResolverRoot) List() gqlgen.ListResolver {
	ret := _m.Called()

	var r0 gqlgen.ListResolver
	if rf, ok := ret.Get(0).(func() gqlgen.ListResolver); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gqlgen.ListResolver)
		}
	}

	return r0
}

// ListHeart provides a mock function with given fields:
func (_m *ResolverRoot) ListHeart() gqlgen.ListHeartResolver {
	ret := _m.Called()

	var r0 gqlgen.ListHeartResolver
	if rf, ok := ret.Get(0).(func() gqlgen.ListHeartResolver); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gqlgen.ListHeartResolver)
		}
	}

	return r0
}

// ListItem provides a mock function with given fields:
func (_m *ResolverRoot) ListItem() gqlgen.ListItemResolver {
	ret := _m.Called()

	var r0 gqlgen.ListItemResolver
	if rf, ok := ret.Get(0).(func() gqlgen.ListItemResolver); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gqlgen.ListItemResolver)
		}
	}

	return r0
}

// Mutation provides a mock function with given fields:
func (_m *ResolverRoot) Mutation() gqlgen.MutationResolver {
	ret := _m.Called()

	var r0 gqlgen.MutationResolver
	if rf, ok := ret.Get(0).(func() gqlgen.MutationResolver); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gqlgen.MutationResolver)
		}
	}

	return r0
}

// Query provides a mock function with given fields:
func (_m *ResolverRoot) Query() gqlgen.QueryResolver {
	ret := _m.Called()

	var r0 gqlgen.QueryResolver
	if rf, ok := ret.Get(0).(func() gqlgen.QueryResolver); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gqlgen.QueryResolver)
		}
	}

	return r0
}

// User provides a mock function with given fields:
func (_m *ResolverRoot) User() gqlgen.UserResolver {
	ret := _m.Called()

	var r0 gqlgen.UserResolver
	if rf, ok := ret.Get(0).(func() gqlgen.UserResolver); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gqlgen.UserResolver)
		}
	}

	return r0
}
