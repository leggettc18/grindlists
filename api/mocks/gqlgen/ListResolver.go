// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	gqlgen "github.com/leggettc18/grindlists/api/gqlgen"
	mock "github.com/stretchr/testify/mock"

	pg "github.com/leggettc18/grindlists/api/pg"
)

// ListResolver is an autogenerated mock type for the ListResolver type
type ListResolver struct {
	mock.Mock
}

// Hearts provides a mock function with given fields: ctx, obj
func (_m *ListResolver) Hearts(ctx context.Context, obj *pg.List) (*gqlgen.ListHeartAggregate, error) {
	ret := _m.Called(ctx, obj)

	var r0 *gqlgen.ListHeartAggregate
	if rf, ok := ret.Get(0).(func(context.Context, *pg.List) *gqlgen.ListHeartAggregate); ok {
		r0 = rf(ctx, obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlgen.ListHeartAggregate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pg.List) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Items provides a mock function with given fields: ctx, obj
func (_m *ListResolver) Items(ctx context.Context, obj *pg.List) ([]pg.ListItem, error) {
	ret := _m.Called(ctx, obj)

	var r0 []pg.ListItem
	if rf, ok := ret.Get(0).(func(context.Context, *pg.List) []pg.ListItem); ok {
		r0 = rf(ctx, obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pg.ListItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pg.List) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// User provides a mock function with given fields: ctx, obj
func (_m *ListResolver) User(ctx context.Context, obj *pg.List) (*pg.User, error) {
	ret := _m.Called(ctx, obj)

	var r0 *pg.User
	if rf, ok := ret.Get(0).(func(context.Context, *pg.List) *pg.User); ok {
		r0 = rf(ctx, obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pg.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pg.List) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
