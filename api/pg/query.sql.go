// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package pg

import (
	"context"
	"database/sql"
	"time"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items (name, source, created_at, updated_at)
VALUES ($1, $2, $3, $3)
RETURNING id, name, source, created_at, updated_at, deleted_at
`

type CreateItemParams struct {
	Name      string
	Source    string
	CreatedAt time.Time
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, createItem, arg.Name, arg.Source, arg.CreatedAt)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Source,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createList = `-- name: CreateList :one
INSERT INTO lists (name, user_id, created_at, updated_at)
VALUES ($1, $2, $3, $3)
RETURNING id, name, user_id, created_at, updated_at, deleted_at
`

type CreateListParams struct {
	Name      string
	UserID    int64
	CreatedAt time.Time
}

func (q *Queries) CreateList(ctx context.Context, arg CreateListParams) (List, error) {
	row := q.db.QueryRowContext(ctx, createList, arg.Name, arg.UserID, arg.CreatedAt)
	var i List
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, email, hashed_password, created_at, updated_at)
VALUES ($1, $2, $3, $4, $4)
RETURNING id, name, email, hashed_password, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Name           string
	Email          string
	HashedPassword []byte
	CreatedAt      time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.HashedPassword,
		arg.CreatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteItem = `-- name: DeleteItem :one
DELETE FROM items
WHERE id = $1
RETURNING id, name, source, created_at, updated_at, deleted_at
`

func (q *Queries) DeleteItem(ctx context.Context, id int64) (Item, error) {
	row := q.db.QueryRowContext(ctx, deleteItem, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Source,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteList = `-- name: DeleteList :one
DELETE FROM lists
WHERE id = $1
RETURNING id, name, user_id, created_at, updated_at, deleted_at
`

func (q *Queries) DeleteList(ctx context.Context, id int64) (List, error) {
	row := q.db.QueryRowContext(ctx, deleteList, id)
	var i List
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users
WHERE id = $1
RETURNING id, name, email, hashed_password, created_at, updated_at, deleted_at
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getItem = `-- name: GetItem :one
SELECT id, name, source, created_at, updated_at, deleted_at FROM items WHERE id = $1
`

func (q *Queries) GetItem(ctx context.Context, id int64) (Item, error) {
	row := q.db.QueryRowContext(ctx, getItem, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Source,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getList = `-- name: GetList :one
SELECT id, name, user_id, created_at, updated_at, deleted_at FROM lists WHERE id = $1
`

func (q *Queries) GetList(ctx context.Context, id int64) (List, error) {
	row := q.db.QueryRowContext(ctx, getList, id)
	var i List
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, email, hashed_password, created_at, updated_at, deleted_at FROM users WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, hashed_password, created_at, updated_at, deleted_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserLists = `-- name: GetUserLists :many
SELECT id, name, user_id, created_at, updated_at, deleted_at FROM lists WHERE user_id = $1
`

func (q *Queries) GetUserLists(ctx context.Context, userID int64) ([]List, error) {
	rows, err := q.db.QueryContext(ctx, getUserLists, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []List
	for rows.Next() {
		var i List
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listItems = `-- name: ListItems :many
SELECT id, name, source, created_at, updated_at, deleted_at FROM items ORDER BY name
`

func (q *Queries) ListItems(ctx context.Context) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, listItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Source,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLists = `-- name: ListLists :many
SELECT id, name, user_id, created_at, updated_at, deleted_at FROM lists ORDER BY name
`

func (q *Queries) ListLists(ctx context.Context) ([]List, error) {
	rows, err := q.db.QueryContext(ctx, listLists)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []List
	for rows.Next() {
		var i List
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, email, hashed_password, created_at, updated_at, deleted_at FROM users ORDER BY name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.HashedPassword,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setListItem = `-- name: SetListItem :exec
INSERT INTO list_items (quantity, collected, list_id, item_id, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $5)
`

type SetListItemParams struct {
	Quantity  sql.NullInt64
	Collected bool
	ListID    int64
	ItemID    int64
	CreatedAt time.Time
}

func (q *Queries) SetListItem(ctx context.Context, arg SetListItemParams) error {
	_, err := q.db.ExecContext(ctx, setListItem,
		arg.Quantity,
		arg.Collected,
		arg.ListID,
		arg.ItemID,
		arg.CreatedAt,
	)
	return err
}

const unsetListItem = `-- name: UnsetListItem :exec
DELETE FROM list_items
WHERE id = $1
`

func (q *Queries) UnsetListItem(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, unsetListItem, id)
	return err
}

const updateItem = `-- name: UpdateItem :one
UPDATE items
SET name = $2, source = $3, updated_at = $4
WHERE id = $1
RETURNING id, name, source, created_at, updated_at, deleted_at
`

type UpdateItemParams struct {
	ID        int64
	Name      string
	Source    string
	UpdatedAt time.Time
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, updateItem,
		arg.ID,
		arg.Name,
		arg.Source,
		arg.UpdatedAt,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Source,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateList = `-- name: UpdateList :one
UPDATE lists
SET name = $2, user_id = $3, updated_at = $4
WHERE id = $1
RETURNING id, name, user_id, created_at, updated_at, deleted_at
`

type UpdateListParams struct {
	ID        int64
	Name      string
	UserID    int64
	UpdatedAt time.Time
}

func (q *Queries) UpdateList(ctx context.Context, arg UpdateListParams) (List, error) {
	row := q.db.QueryRowContext(ctx, updateList,
		arg.ID,
		arg.Name,
		arg.UserID,
		arg.UpdatedAt,
	)
	var i List
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateListItem = `-- name: UpdateListItem :exec
UPDATE list_items
SET quantity = $2, collected = $3, updated_at = $4
WHERE id = $1
`

type UpdateListItemParams struct {
	ID        int64
	Quantity  sql.NullInt64
	Collected bool
	UpdatedAt time.Time
}

func (q *Queries) UpdateListItem(ctx context.Context, arg UpdateListItemParams) error {
	_, err := q.db.ExecContext(ctx, updateListItem,
		arg.ID,
		arg.Quantity,
		arg.Collected,
		arg.UpdatedAt,
	)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET name = $2, email= $3, hashed_password = $4, updated_at = $5
WHERE id = $1
RETURNING id, name, email, hashed_password, created_at, updated_at, deleted_at
`

type UpdateUserParams struct {
	ID             int64
	Name           string
	Email          string
	HashedPassword []byte
	UpdatedAt      time.Time
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.HashedPassword,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
