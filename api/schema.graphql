type User {
    id: ID!
    name: String!
    email: String!
    lists: [List!]
}

type List {
    id: ID!
    name: String!
    user: User!
    items: [ListItem!]
    hearts: ListHeartAggregate!
}

type Item {
    id: ID!
    name: String!
    source: String!
}

type ListItem {
    id: ID!
    quantity: Int
    collected: Boolean!
    list: List!
    item: Item!
}

type ListHeart {
    id: ID!
    user: User!
    list: List!
}

type ListHeartAggregate {
    count: Int!
    hearts: [ListHeart!]
}

type Query {
    me: User!
    user(id: ID!): User
    users: [User!]!
    list(id: ID!): List
    lists: [List!]!
    item(id: ID!): Item
    items: [Item!]!
}

type Mutation {
    login(data: LoginInput!): User!
    register(data: UserInput!): User!
    refresh: User!
    logout: LogoutOutput!
    updateUser(id: ID!, data: UserInput!): User!
    deleteUser(id: ID!): User!
    createList(data: ListInput!): List!
    updateList(id: ID!, data: ListInput!): List!
    deleteList(id: ID!): List!
    createListItem(listItemData: CreateListItemInput!): Item!
    updateItem(id: ID!, data: ItemInput!): Item!
    deleteItem(id: ID!): Item!
    setListItem(data: ListItemInput!): ListItem!
    updateListItem(id: ID!, data: ListItemInput!): ListItem!
    unsetListItem(id: ID!): ListItem!
    heart(list_id: ID!): List!
}

input UserInput {
    name: String!
    email: String!
    password: String!
}

input ListInput {
    name: String!
}

input ItemInput {
    name: String!
    source: String!
}

input CreateListItemInput {
    name: String!
    source: String!
    quantity: Int
    collected: Boolean!
    list_id: ID!
}

input ListItemInput {
    quantity: Int
    collected: Boolean!
    list_id: ID!
    item_id: ID!
}

input LoginInput {
    email: String!
    password: String!
}

type LogoutOutput {
    user_id: ID!
    succeeded: Boolean!
}